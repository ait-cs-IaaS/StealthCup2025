package main

import (
	"fmt"
	"os"
	"os/exec"
	"time"
	"strings"

	"github.com/go-vgo/robotgo"
)

func printHelp() {
	fmt.Println("Usage: KeePassStarter [keePassPath] [databasePath] [password]")
	fmt.Println("Example:")
	fmt.Println("  KeePassStarter C:\\Path\\To\\KeePass.exe C:\\Path\\To\\Database.kdbx MyP@ssw0rd")
}

func main() {
	if len(os.Args) != 4 {
		fmt.Println("Error: Missing arguments.")
		printHelp()
		return
	}

	keePassPath := os.Args[1]
	databasePath := os.Args[2]
	password := os.Args[3]

	cmd := exec.Command(keePassPath, databasePath)
	err := cmd.Start()
	if err != nil {
		fmt.Printf("Error starting KeePass: %v\n", err)
		return
	}

	// Allow time for KeePass to start
	time.Sleep(2 * time.Second)

	// Bring KeePass to the front if it is not active already
	attempts := 1
	for {
		title := robotgo.GetTitle()
		fmt.Println("Current Title: ", title)

		if strings.Contains(strings.ToLower(title), "open database -") {
			// KeePass should now be active
			break
		}

		robotgo.KeyDown("alt")
		for i := 0; i < attempts; i++ {
			robotgo.KeyTap("tab")
			time.Sleep(50 * time.Millisecond)
		}
		robotgo.KeyUp("alt")

		attempts++
		time.Sleep(500 * time.Millisecond)
	}

	// Unlock the database
	robotgo.TypeStr(password)
	time.Sleep(500 * time.Millisecond)
	robotgo.KeyTap("enter")
	time.Sleep(500 * time.Millisecond)

	// Lock the database
	robotgo.KeyDown("ctrl")
	robotgo.KeyTap("l")
	robotgo.KeyUp("ctrl")
	time.Sleep(2 * time.Second)

	// At this point the database should be locked and we should be good to go
	// In some cases the db wasnt locked however (i guess because the aws machines were too slow)
	// This makes sure KeePass is at front once again and the database gets locked properly
	
	// Bring KeePass to the front if it is not active already
	attempts = 1
	for {
		title := robotgo.GetTitle()
		fmt.Println("Current Title: ", title)

		if strings.Contains(strings.ToLower(title), ".kdbx - keepass") {
			// KeePass should now be active
			break
		}

		if attempts > 5 {
			break
		}

		robotgo.KeyDown("alt")
		for i := 0; i < attempts; i++ {
			robotgo.KeyTap("tab")
			time.Sleep(50 * time.Millisecond)
		}
		robotgo.KeyUp("alt")

		attempts++
		time.Sleep(500 * time.Millisecond)
	}

	// One more time for good luck

	// Lock the database
	robotgo.KeyDown("ctrl")
	robotgo.KeyTap("l")
	robotgo.KeyUp("ctrl")
	time.Sleep(2 * time.Second)

		// Bring KeePass to the front if it is not active already
		attempts = 1
		for {
			title := robotgo.GetTitle()
			fmt.Println("Current Title: ", title)
	
			if strings.Contains(strings.ToLower(title), ".kdbx - keepass") {
				// KeePass should now be active
				break
			}
	
			if attempts > 5 {
				break
			}
	
			robotgo.KeyDown("alt")
			for i := 0; i < attempts; i++ {
				robotgo.KeyTap("tab")
				time.Sleep(50 * time.Millisecond)
			}
			robotgo.KeyUp("alt")
	
			attempts++
			time.Sleep(500 * time.Millisecond)
		}
	
		// Lock the database
		robotgo.KeyDown("ctrl")
		robotgo.KeyTap("l")
		robotgo.KeyUp("ctrl")
		time.Sleep(2 * time.Second)
}
