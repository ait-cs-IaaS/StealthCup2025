---
- name: Configure Credential Manager on Enterprise Client
  hosts: enterprise:&client
  gather_facts: false
  become_method: runas

  vars:
    credential_name: "http://hist.plumetech-ot.local:3000/login"
    seperator: '\' # https://stackoverflow.com/questions/58487845/ansible-jinja-split-on-backslash-fails

  tasks:
    - name: Split hostname and extract the team part
      set_fact:
        team_name: "{{ inventory_hostname.split('_')[0] }}"

    - name: Debug the extracted team name
      debug:
        msg: "The team name extracted is {{ team_name }} on {{ inventory_hostname }}"

    - name: Get environment ID
      set_fact:
        environment_id: "{{ lookup('vars', team_name ~ '_environment_id') }}"

    - name: Debug environment ID
      debug:
        msg: "Environment ID for Team {{ team_name }} is {{ environment_id }}"

    - name: Set config file
      set_fact:
        configuration_file: "./configs/config_{{ environment_id }}.json"

    - name: Load configuration JSON from local machine
      set_fact:
        configuration_json: "{{ lookup('file', configuration_file) | from_json }}"

    - name: Extract machine name from inventory_hostname
      set_fact:
        machine_name: "{{ inventory_hostname.split('_', 1)[1] if '_' in inventory_hostname else inventory_hostname }}"

    - name: Get workstation configuration
      set_fact:
        workstation_configuration: >-
          {{ configuration_json['WindowsHosts'] | selectattr('HostID', 'equalto', machine_name) | list | first | default({}) }}

    - name: Get the domain user
      set_fact:
        domain_user: "{{ workstation_configuration['DomainAccountUsername'] }}"

    - name: Debug domain user
      debug:
        msg: "{{ domain_user }}"

    - name: Get domain configuration
      set_fact:
        domain_configuration: >-
          {{ configuration_json['Domains'] | selectattr('HostID', 'equalto', workstation_configuration['DCHostID']) | list | first | default({}) }}

    - name: Debug domain configuration
      debug:
        msg: "{{ domain_configuration }}"

    - name: Get domain user configuration
      set_fact:
        domain_user_configuration: >-
          {{ domain_configuration['DomainUsers'] | selectattr('Username', 'equalto', domain_user) | list | first | default({}) }}

    - name: Debug domain user configuration
      debug:
        msg: "{{ domain_user_configuration }}"

    - name: Get domain
      set_fact:
        domain: "{{ domain_user.split(seperator)[0] }}"
        domain_user_name: "{{ domain_user.split(seperator)[-1] }}"
  
    - name: Logon as target user
      win_shell: |
        $Password = ConvertTo-SecureString "{{ domain_user_configuration['Password'] }}" -AsPlainText -Force
        $Credential = New-Object System.Management.Automation.PSCredential("{{ domain_user_configuration['Username'] }}", $Password)
        Start-Process C:\Windows\System32\WindowsPowershell\v1.0\powershell.exe -Wait -NoNewWindow -Credential $Credential -ArgumentList "-Command whoami"

    - name: Set autologon credentials
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: "{{ item.name }}"
        data: "{{ item.data }}"
        type: string
      with_items:
        - { name: "DefaultUserName", data: "{{ domain_user_name }}" }
        - { name: "DefaultPassword", data: "{{ domain_user_configuration['Password'] }}" }
        - { name: "DefaultDomainName", data: "{{ domain }}" }
        - { name: "AutoAdminLogon", data: 1 }

    - name: Reboot machine
      win_reboot:

    # autologon credentials will be removed in _reset_enterprise_client_scheduled_ntlm_task.yml
    # - name: Remove autologon credentials
    #   win_regedit:
    #     path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
    #     name: "{{ item }}"
    #     state: absent
    #   with_items:
    #     - "DefaultUserName"
    #     - "DefaultPassword"
    #     - "DefaultDomainName"
    #     - "AutoAdminLogon"

    - name: Get grafana configuration
      set_fact:
        grafana_configuration: >-
          {{ configuration_json['Software'] | selectattr('SoftwareID', 'equalto', 'grafana') | list | first | default({}) }}

    - name: Debug grafana configuration
      debug:
        msg: "{{ grafana_configuration }}"

    - name: Extract grafana credentials
      set_fact:
        grafana_username: "{{ grafana_configuration['Username'] | default({}) }}"
        grafana_password: "{{ grafana_configuration['Password'] | default({}) }}"

    - name: Remove Grafana Credentials from Credential Manager (if exists)
      become: yes
      become_user: "{{ domain_user_configuration['Username'] }}"
      community.windows.win_credential:
        name: "{{ credential_name}}"
        type: generic_password
        state: absent

    - name: Create Grafana Credentials
      become: yes
      become_user: "{{ domain_user_configuration['Username'] }}"
      community.windows.win_credential:
        name: "{{ credential_name }}"
        type: generic_password
        username: "{{ grafana_username }}"
        secret: "{{ grafana_password }}"
        state: present
